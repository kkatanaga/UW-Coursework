package codesKK280;

import java.awt.BorderLayout;
import java.awt.GraphicsConfiguration;

import javax.swing.JFrame;
import javax.swing.JPanel;

import org.jogamp.java3d.*;
import org.jogamp.java3d.utils.geometry.Box;
import org.jogamp.java3d.utils.universe.SimpleUniverse;
import org.jogamp.vecmath.*;

public class Assignment2KK extends JPanel {
	private static final long serialVersionUID = 1L;
	private static JFrame frame;
	
	/* a function to build the content branch */
	public static BranchGroup create_Scene() {
		BranchGroup sceneBG = new BranchGroup();           						// create the scene's BranchGroup
		TransformGroup sceneTG = new TransformGroup();     						// create the scene's TransformGroup
		
		Color3f baseColor = CommonsKK.Orange;
		TransformGroup baseTG = new CylinderShapes(baseColor).position_Object();// creates 4 cylinder shapes with transformation as children of baseTG
		Appearance appearance = CommonsKK.obj_Appearance(baseColor);			// color of boxes; same as cylinders
		baseTG.addChild(new Box(0.5f, 0.1f, 1.0f, appearance));					// 1 x 0.2 x 2 box
		baseTG.addChild(new Box(1.0f, 0.1f, 0.5f, appearance));					// 2 x 0.2 x 1 box
		baseTG.addChild(new StringShape("KK's Assignment 2").position_Object());// stringTG
		
		sceneTG.addChild(baseTG);												// 4 cylinders and 2 boxes
		Color3f ringColor1 = CommonsKK.Cyan;
		Color3f ringColor2 = CommonsKK.Orange;
		TransformGroup ring1TG = new Ring1Shape(ringColor1).position_Object();	// load Ring1.obj
		TransformGroup ring2TG = new Ring2Shape(ringColor2).position_Object();	// load Ring2.obj
		TransformGroup ring3TG = new Ring3Shape(ringColor1).position_Object();	// load Ring3.obj
		ring3TG.addChild(new Ring4Shape(ringColor2).position_Object());			// load Ring4.obj and it inherits Ring3's transformations
		ring2TG.addChild(ring3TG);												// Ring3 inherits Ring2's transformations
		ring1TG.addChild(ring2TG);												// Ring2 inherits Ring1's transformations
		sceneTG.addChild(ring1TG);												// sceneTG holds the concentric rings
		sceneTG.addChild(new RoomBackground().position_Object());
		
		sceneBG.addChild(CommonsKK.add_Lights(CommonsKK.White, 1));				// SceneGraphA1.jpg doesn't include it, but lights are required
		sceneBG.addChild(CommonsKK.rotate_Behavior(7500, sceneTG));	
		sceneBG.addChild(sceneTG);                         						// make 'sceneTG' continuous rotating
		sceneBG.addChild(new AxesShape().position_Object());					// /!\ Part of Lab1KK; creates the x, y, z axes /!\
		return sceneBG;
	}

	/* NOTE: Keep the constructor for each of the labs and assignments */
	public Assignment2KK(BranchGroup sceneBG) {
		GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
		Canvas3D canvas = new Canvas3D(config);
		
		SimpleUniverse su = new SimpleUniverse(canvas);    // create a SimpleUniverse
		CommonsKK.define_Viewer(su, new Point3d(4.0d, 1.0d, 1.0d));
		
		sceneBG.addChild(CommonsKK.key_Navigation(su));    // allow key navigation
		sceneBG.compile();		                           // optimize the BranchGroup
		su.addBranchGraph(sceneBG);                        // attach the scene to SimpleUniverse

		setLayout(new BorderLayout());
		add("Center", canvas);
		frame.setSize(800, 800);                           // set the size of the JFrame
		frame.setVisible(true);
	}

	public static void main(String[] args) {
		frame = new JFrame("KK's Assignment2");
		frame.getContentPane().add(new Assignment2KK(create_Scene()));  // create an instance of the class
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}
